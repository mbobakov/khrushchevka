// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package live

import (
	"github.com/mbobakov/khrushchevka/internal"
	"sync"
)

// Ensure, that LightsControllerMock does implement LightsController.
// If this is not the case, regenerate this file with moq.
var _ LightsController = &LightsControllerMock{}

// LightsControllerMock is a mock implementation of LightsController.
//
//	func TestSomethingThatUsesLightsController(t *testing.T) {
//
//		// make and configure a mocked LightsController
//		mockedLightsController := &LightsControllerMock{
//			ResetFunc: func() error {
//				panic("mock out the Reset method")
//			},
//			SetFunc: func(addr internal.LightAddress, isON bool) error {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedLightsController in code that requires LightsController
//		// and then make assertions.
//
//	}
type LightsControllerMock struct {
	// ResetFunc mocks the Reset method.
	ResetFunc func() error

	// SetFunc mocks the Set method.
	SetFunc func(addr internal.LightAddress, isON bool) error

	// calls tracks calls to the methods.
	calls struct {
		// Reset holds details about calls to the Reset method.
		Reset []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Addr is the addr argument value.
			Addr internal.LightAddress
			// IsON is the isON argument value.
			IsON bool
		}
	}
	lockReset sync.RWMutex
	lockSet   sync.RWMutex
}

// Reset calls ResetFunc.
func (mock *LightsControllerMock) Reset() error {
	if mock.ResetFunc == nil {
		panic("LightsControllerMock.ResetFunc: method is nil but LightsController.Reset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	return mock.ResetFunc()
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedLightsController.ResetCalls())
func (mock *LightsControllerMock) ResetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *LightsControllerMock) Set(addr internal.LightAddress, isON bool) error {
	if mock.SetFunc == nil {
		panic("LightsControllerMock.SetFunc: method is nil but LightsController.Set was just called")
	}
	callInfo := struct {
		Addr internal.LightAddress
		IsON bool
	}{
		Addr: addr,
		IsON: isON,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(addr, isON)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedLightsController.SetCalls())
func (mock *LightsControllerMock) SetCalls() []struct {
	Addr internal.LightAddress
	IsON bool
} {
	var calls []struct {
		Addr internal.LightAddress
		IsON bool
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
